%ifndef __PRINT_MAC__
%define __PRINT_MAC__

;; print_text_pm:
;;  Description:
;;      Print string in the specified video memory section (protected mode)
;;
;;  Parameters:
;;      %1: String pointer
;;      %2: String length
;;      %3: Color
;;      %4: Row
;;      %5: Column
;;
;;  Color:
;;      * Bit #: 7 6 5 4 3 2 1 0
;;               | | | | | | | |
;;               | | | | | ^-^-^-- Fore color
;;               | | | | ^-------- Fore color bright bit
;;               | ^-^-^---------- Back color
;;               ^---------------- Back color bright bit OR enables blinking text
;;
;;
%macro print_text_pm 5
    pushad

    push %3             
    push %2             
    push %1             
    push %5             
    push %4             

    pop eax             
    mov ebx, 80
    imul ebx            
    pop ebx             
    add eax, ebx        

    
    mov ebx, 0xb8000    
    shl eax, 1          
    add ebx, eax        

    
    pop edi             
    pop ecx             
    pop eax             

    
    shl ax, 8           

    %%ciclo_cadena:
        mov     al, [edi]       
        mov     [ebx], ax       
        add     ebx, 2          
        inc     edi             
        loop    %%ciclo_cadena

    popad
%endmacro

;; print_text_rm:
;;  Description:
;;      Print string in the specified video memory section (real mode)
;;
;;  Parameters:
;;      %1: String pointer
;;      %2: String length
;;      %3: Color
;;      %4: Row
;;      %5: Column
;;
;;  Color:
;;      * Bit #: 7 6 5 4 3 2 1 0
;;               | | | | | | | |
;;               | | | | | ^-^-^-- Fore color
;;               | | | | ^-------- Fore color bright bit
;;               | ^-^-^---------- Back color
;;               ^---------------- Back color bright bit OR enables blinking text
;;
;;
%macro print_text_rm 5
    pusha

    push es

    push %3             
    push %2             
    push %1             
    push %5             
    push %4             

    ; Calcular offset para imprimir en pantalla
    ; offset = fila * 80 + columna
    pop ax              
    mov bx, 80
    imul bx             
    pop bx              
    add ax, bx          

    ; Establecer puntero a la base de la memoria de video
    mov ax, 0xb800      
    mov es, ax

    ; Establecer offset al buffer de pantalla en (fila, columna)
    shl ax, 1           

    ; Cargar mensaje, longitud y color
    pop di              
    pop cx              
    pop ax              

    ; Acomodar color en la parte alta de ax
    shl ax, 8           

    ; Imprimir cadena
    %%ciclo_cadena:
        mov     al, [di]        
        mov     [es:bx], ax     
        add     bx, 2           
        inc     di              
        loop    %%ciclo_cadena

    pop es

    popa
%endmacro

%endif  ;; !__PRINT_MAC__ ;;
